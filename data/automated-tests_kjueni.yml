category: Automated tests (kjueni)
questions:
    #Unit tests with PHPUnit - http://symfony.com/doc/current/testing.html#unit-tests
    -
        question: 'True or False ? A unit test is a test against a single PHP class, also called a unit'
        answers:
            - {value: "True", correct: true}
            - {value: "False", correct: false}
    -
        question: 'True or False ? A unit test is a test against a single PHP method, also called a unit'
        answers:
            - {value: "False", correct: true}
            - {value: "True", correct: false}
    -
        question: 'True or False ? Test should be created in the "tests/" and be suffixed by "Test"'
        answers:
            - {value: "True", correct: true}
            - {value: "False", correct: false}
    -
        question: 'True or False ? Test should be created in the "tests/Util" and be prefixed by "Test"'
        answers:
            - {value: "False", correct: true}
            - {value: "True", correct: false}
    -
        question: 'True or False ? By convention, the tests/ directory should replicate the directory of your e.g. a test for a class in "src/Util/" should be placed in the directory "tests/Util"'
        answers:
            - {value: "True", correct: true}
            - {value: "False", correct: false}
    -
        question: 'What is the the correct statement to execute all tests of your application?'
        answers:
            - {value: "./vendor/bin/simple-phpunit", correct: true}
            - {value: "./vendor/bin/phpunit", correct: false}
            - {value: "./bin/console phpunit", correct: false}
            - {value: "/vendor/simple-phpunit", correct: false}
            - {value: "/vendor/bin/phpunit", correct: false}
            - {value: "./bin/console simple-phpunit", correct: false}
    -
        question: 'What is the the correct statement to execute all tests of your "tests/Util" directory?'
        answers:
            - {value: "./vendor/bin/simple-phpunit tests/Util", correct: true}
            - {value: "./vendor/bin/phpunit tests/Util", correct: false}
            - {value: "./bin/console phpunit tests/Util", correct: false}
            - {value: "/vendor/simple-phpunit test util", correct: false}
            - {value: "/vendor/bin/phpunit tests Util", correct: false}
            - {value: "./bin/console simple-phpunit tests util", correct: false}
    -
        question: 'What is the the correct statement to execute all tests for your "Calculator" class?'
        answers:
            - {value: "./vendor/bin/simple-phpunit tests/Util/CalculatorTest.php", correct: true}
            - {value: "./vendor/bin/phpunit tests/Util/CalculatorTest.php", correct: false}
            - {value: "./bin/console phpunit tests/Util/CalculatorTest.php", correct: false}
            - {value: "/vendor/simple-phpunit tests/Util CalculatorTest.php", correct: false}
            - {value: "/vendor/bin/phpunit tests/Util CalculatorTest.php", correct: false}
            - {value: "./bin/console simple-phpunit  tests/Util CalculatorTest.php", correct: false}
    #Functional tests with PHPUnit -
    -
        question: 'True or False ? Functional tests check the integration of the different layers of an application (from the routing to the views)'
        answers:
            - {value: "True", correct: true}
            - {value: "False", correct: false}
    -
        question: 'True or False ? Functional tests check if a specific class provides all needed functionality'
        answers:
            - {value: "False", correct: true}
            - {value: "True", correct: false}
    -
        question: 'True or False ? Make a request; Test the response; Click on a link or submit a form; Test the response; Rinse and repeat. is the specific workflow for a functional test'
        answers:
            - {value: "True", correct: true}
            - {value: "False", correct: false}
    -
        question: 'True or False ? Make a request; Test the response; Click on a link or submit a form; Rinse and repeat. is the specific workflow for a functional test'
        answers:
            - {value: "False", correct: true}
            - {value: "True", correct: false}
    -
        question: 'Which component needs to be installed specificly to enable functional testing?'
        answers:
            - {value: "symfony/browser-kit", correct: true}
            - {value: "symfony/browser", correct: false}
            - {value: "symfony/browser-component", correct: false}
    -
        question: 'In which directory functional tests should commonly live? '
        answers:
            - {value: "tests/Controller", correct: true}
            - {value: "tests/Controllers", correct: false}
    -
        question: 'Which default class provided by Symfony should be extended by functional tests?'
        answers:
            - {value: "WebTestCase", correct: true}
            - {value: "WebCase", correct: false}
            - {value: "WebCaseTest", correct: false}
            - {value: "WebTest", correct: false}
    -
        question: 'What has to be defined in the phpunit.xml.dist file to be able to run functional tests?'
        answers:
            - {value: "The FQCN of your kernel as ENV-Variable 'KERNEL_CLASS'", correct: true}
            - {value: "The file-path to your kernel as ENV-Variable 'KERNEL_PATH'", correct: false}
            - {value: "The FQCN of your application as ENV-Variable 'APPLICATION_CLASS'", correct: false}
            - {value: "The file-path to your application as ENV-Variable 'APPLICATION_PATH'", correct: false}
    -
        question: 'Which method in a WebTestCase returns a new HTTP-Client?'
        answers:
            - {value: "createClient", correct: true}
            - {value: "getClient", correct: false}
            - {value: "initClient", correct: false}
            - {value: "initializeClient", correct: false}
    -
        question: 'What does the request method of the HTTP-Client return?'
        answers:
            - {value: "A 'Crawler' instance", correct: true}
            - {value: "Another 'Client' instance", correct: false}
            - {value: "A 'DomDocument' instance", correct: false}
    -
        question: 'Which response formats does a "Crawler" support?'
        answers:
            - {value: "xml", correct: true}
            - {value: "html", correct: true}
            - {value: "json", correct: false}
            - {value: "php", correct: false}
            - {value: "rST", correct: false}
    -
        question: 'Which component can be used by the "Crawler" to enable css style selection?'
        answers:
            - {value: "symfony/css-selector", correct: true}
            - {value: "css/selector", correct: false}
            - {value: "symfony/cssselector", correct: false}
            - {value: "symfony/css-selection", correct: false}
    -
        question: 'What would be the correct syntax to find the number of occurences of the phrase "Hello World" on a page?'
        answers:
            - {value: "$crawler->filter('html:contains('Hello World`)')->count()", correct: true}
            - {value: "$crawler->filterCSS('html:contains('Hello World`)')->count()", correct: false}
            - {value: "$crawler->filter('html_contains('Hello World`)')->count()", correct: false}
            - {value: "$crawler->filter('html:contains('Hello World`)'):count", correct: false}
    -
        question: 'What would be the correct syntax to get a form via its submit button?'
        answers:
            - {value: "$form = $crawler->selectButton('submit')->form();", correct: true}
            - {value: "$form = $crawler->selectButton('submit')->getForm();", correct: false}
            - {value: "$form = $crawler->button('submit')->form();", correct: false}
            - {value: "$form = $crawler->getButton('submit')->form();", correct: false}
            - {value: "$form = $crawler->getButton('submit')->getForm();", correct: false}
    -
        question: 'Which would be the correct syntax to submit a form?'
        answers:
            - {value: "$crawler = $client->submit($form);", correct: true}
            - {value: "$crawler = $crawler->submit($form);", correct: false}
            - {value: "$crawler = $client->submitForm($form);", correct: false}
            - {value: "$crawler = $crawler->submitForm($form);", correct: false}
            - {value: "$crawler = $form->submit()", correct: false}
    -
        question: 'Which of the following statements would be correct if you would want to assert that there is more than one h1 heading on the page?'
        answers:
            - {value: "$this->assertGreaterThan(0, $crawler->filter('h1')->count());", correct: true}
            - {value: "$this->assertLowerThan(1, $crawler->filter('h1')->count());", correct: false}
            - {value: "$this->assertGreater(0, $crawler->filter('h1')->count());", correct: false}
            - {value: "$this->assertEqual(0, $crawler->filter('h1')->count());", correct: false}
    -
        question: 'What would be the correct approach to test the content of a page without using the crawler?'
        answers:
            - {value: "$this->assertContains('Hello World', $client->getResponse()->getContent());", correct: true}
            - {value: "$this->assertContains('Hello World', $client->getResponse());", correct: false}
            - {value: "$this->contains('Hello World', $client->getResponse()->getContent());", correct: false}
            - {value: "$this->assertContent('Hello World', $client->getResponse()->getContent());", correct: false}
            - {value: "$this->assert('Hello World', $client->getRequest()->getContent());", correct: false}
    -
        question: 'Which of the following assertions do actually exist?'
        answers:
            - {value: "assertGreaterThan", correct: true}
            - {value: "assertCount", correct: true}
            - {value: "assertTrue", correct: true}
            - {value: "assertContains", correct: true}
            - {value: "assertEquals", correct: true}
            - {value: "assertGreater", correct: false}
            - {value: "assertBooleanTrue", correct: false}
            - {value: "assertContain", correct: false}
    #Client object - http://symfony.com/doc/current/testing.html#working-with-the-test-client
    -
        question: 'True or False ? Hardcoding the request URLs is a best practice for functional tests'
        answers:
            - {value: "True", correct: true}
            - {value: "False", correct: false}
    -
        question: 'What would be the correct syntax to pass parameters to call of the test request?'
        answers:
            - {value: "$client->request('GET', 'http://localhost', array('foo' => 'bar'), $files, $server, $content, $changeHistory);", correct: true}
            - {value: "$client->request('http://localhost', 'GET', array('foo' => 'bar'), $files, $server, $content, $changeHistory);", correct: false}
            - {value: "$client->request('GET', 'http://localhost', $files, $server, array('foo' => 'bar'), $content, $changeHistory);", correct: false}
            - {value: "$client->request('GET', 'http://localhost', $files, array('foo' => 'bar'), $server, $content, $changeHistory);", correct: false}
            - {value: "$client->request('http://localhost', 'GET', $files, array('foo' => 'bar'), $server, $content, $changeHistory);", correct: false}
            - {value: "$client->request('GET', 'http://localhost', $content, $files, $server, array('foo' => 'bar'), $changeHistory);", correct: false}
    -
        question: 'How to get a link on page with a specific text with the "Crawler"?'
        answers:
            - {value: "$link = $crawler->selectLink('Go elsewhere...')->link();", correct: true}
            - {value: "$link = $crawler->selectLink('Go elsewhere...');", correct: false}
            - {value: "$link = $crawler->link('Go elsewhere...')->selectLing();", correct: false}
            - {value: "$link = $crawler->link('Go elsewhere...')->link();", correct: false}
    -
        question: 'What would be the correct syntax to follow a link selected by the "Crawler"?'
        answers:
            - {value: "$crawler = $client->click($link);", correct: true}
            - {value: "$crawler = $crawler->click($link);", correct: false}
            - {value: "$crawler = $client->follow($link);", correct: false}
            - {value: "$crawler = $crawler->follow($link);", correct: false}
    -
        question: 'What would be the correct syntax to create a post request with a json body?'
        answers:
            - {value: "$client->request('POST', $url, $parameters, $files, $server, '{`name`:`Fabien`}', $changeHistory);", correct: true}
            - {value: "$client->request('POST', $url, $parameters, $files, $server, $changeHistory, '{`name`:`Fabien`}');", correct: false}
            - {value: "$client->request('POST', $url, $parameters, $files, '{`name`:`Fabien`}', $server, $changeHistory);", correct: false}
            - {value: "$client->request('POST', $url, $parameters, '{`name`:`Fabien`}', $files, $server, $changeHistory);", correct: false}
    -
        question: 'True or False ? The "$server" in the HTTP-Client request method represents the "$_SERVER" superglobal'
        answers:
            - {value: "True", correct: true}
            - {value: "False", correct: false}
    -
        question: 'What would be the correct method every request would run in its own PHP process?'
        answers:
            - {value: "$client->insulate();", correct: true}
            - {value: "$client->isolate();", correct: false}
            - {value: "$client->decapsulate();", correct: false}
    -
        question: 'Which of the following Browser functions are provided by the client?'
        answers:
            - {value: "back()", correct: true}
            - {value: "forward()", correct: true}
            - {value: "reload()", correct: true}
            - {value: "restart()", correct: true}
            - {value: "exit()", correct: false}
            - {value: "f5()", correct: false}
            - {value: "refresh()", correct: false}
    -
        question: 'What would be the correct method name to get the cookies of the client?'
        answers:
            - {value: "getCookieJar()", correct: true}
            - {value: "getCookies()", correct: false}
            - {value: "getCookie()", correct: false}
    #Crawler object - http://symfony.com/doc/current/testing.html#the-crawler
    -
        question: 'What would be the correct filter to get all inputs with the crawler?'
        answers:
            - {value: "$newCrawler = $crawler->filter('input[type=submit]');", correct: true}
            - {value: "$newCrawler = $crawler->filter('input[submit]');", correct: false}
            - {value: "$newCrawler = $crawler->filter('input(type=submit)');", correct: false}
            - {value: "$newCrawler = $crawler->filter('input[`type=submit`]');", correct: false}
    -
        question: 'Which of the following methods to exist for the crawler?'
        answers:
            - {value: "filterXpath", correct: true}
            - {value: "eq", correct: true}
            - {value: "first", correct: true}
            - {value: "parents", correct: true}
            - {value: "children", correct: true}
            - {value: "reduce($pattern)", correct: false}
            - {value: "next", correct: false}
            - {value: "previous", correct: false}
            - {value: "all", correct: false}
    -
        question: 'Which of the following methods to exist for the crawler?'
        answers:
            - {value: "filter", correct: true}
            - {value: "first", correct: true}
            - {value: "last", correct: true}
            - {value: "siblings", correct: true}
            - {value: "nextAll", correct: true}
            - {value: "previousAll", correct: true}
            - {value: "parents", correct: true}
            - {value: "children", correct: true}
            - {value: "reduce(function(){})", correct: true}
            - {value: "next", correct: false}
            - {value: "previous", correct: false}
            - {value: "all", correct: false}
    -
        question: 'Which of the following methods to exist for the crawler?'
        answers:
            - {value: "filter", correct: true}
            - {value: "filterXpath", correct: true}
            - {value: "first", correct: true}
            - {value: "last", correct: true}
            - {value: "previousAll", correct: true}
            - {value: "parents", correct: true}
            - {value: "reduce(function(){})", correct: true}
            - {value: "resolve", correct: false}
            - {value: "reduce($pattern)", correct: false}
            - {value: "next", correct: false}
            - {value: "previous", correct: false}
            - {value: "all", correct: false}
    -
        question: 'True or False ? Use the count($crawler) function to get the number of nodes stored in a Crawler'
        answers:
            - {value: "True", correct: true}
            - {value: "False", correct: false}
    -
        question: 'What would be the right syntax to get an attribute of a node with the Crawler?'
        answers:
            - {value: "$crawler->attr('class');", correct: true}
            - {value: "$crawler->attribute('class');", correct: false}
            - {value: "$crawler->getAttribute('class');", correct: false}
    -
        question: 'What would be the right syntax to get an array with node-value and href?'
        answers:
            - {value: "$info = $crawler->extract(array('_text', 'href'));", correct: true}
            - {value: "$info = $crawler->extract(array('text', 'href'));", correct: false}
            - {value: "$info = $crawler->extract(array('value', 'href'));", correct: false}
            - {value: "$info = $crawler->extract('_text', 'href');", correct: false}
            - {value: "$info = $crawler->extract('text', 'href');", correct: false}
            - {value: "$info = $crawler->extract('value', 'href');", correct: false}
    -
        question: 'What would be the right syntax to directly submit a form with an array of overrides?'
        answers:
            - {value: "$client->submit($form, array('name' => 'Fabien'));", correct: true}
            - {value: "$client->submit(array('name' => 'Fabien'), $form);", correct: false}
            - {value: "$client->submitForm($form, array('name' => 'Fabien'));", correct: false}
            - {value: "$client->submitForm(array('name' => 'Fabien'), $form);", correct: false}
            - {value: "$crawler->submit($form, array('name' => 'Fabien'));", correct: false}
    -
        question: 'What would be the correct method to tick a checkbox?'
        answers:
            - {value: "$form['my_checkbox']->tick();", correct: true}
            - {value: "$form['my_checkbox']->setChecked();", correct: false}
            - {value: "$form['my_checkbox']->setChecked(true);", correct: false}
            - {value: "$form['my_checkbox']->setTicked();", correct: false}
            - {value: "$form['my_checkbox']->checks();", correct: false}
    -
        question: 'True or False ? If you use a Collection of Forms, you can`t add fields to an existing form'
        answers:
            - {value: "True", correct: true}
            - {value: "False", correct: false}
    #Profile object - http://symfony.com/doc/current/testing/profiling.html
    -
        question: 'True or False ? To be able to use the profiler in tests, you need to enable it for the whole application in the configs/framework.yaml:framework.profiler section'
        answers:
            - {value: "False", correct: true}
            - {value: "True", correct: false}
    -
        question: 'True or False ? You can enable the profiler in each test manually with $client->enableProfiler()'
        answers:
            - {value: "True", correct: true}
            - {value: "False", correct: false}
    -
        question: 'How to get the Profiler instance via the HTTP-Client?'
        answers:
            - {value: "$client->getProfile()", correct: true}
            - {value: "$client->getProfiler()", correct: false}
            - {value: "$client->initProfiler()", correct: false}
            - {value: "$client->enableProfiler()", correct: false}
    -
        question: 'What would be the correct syntax to get the query count for the current request?'
        answers:
            - {value: "$profile->getCollector('db')->getQueryCount();", correct: true}
            - {value: "$client->getProfile()->getCollector('db')->getQueryCount()", correct: true}
            - {value: "$profile->getCollection('db')->getCount();", correct: false}
            - {value: "$profile->getCollector('doctrine')->getCount();", correct: false}
            - {value: "$profile->getCollection('db')->getQueryCount();", correct: false}
    #Framework objects access - http://symfony.com/doc/current/testing.html#accessing-the-container
    -
        question: 'What would be the correct syntax to get the Dependency Injection Container in your test?'
        answers:
            - {value: "$container = $client->getContainer();", correct: true}
            - {value: "$container = $this->getContainer();", correct: false}
            - {value: "$container = $client->getDependencyInjectionContainer();", correct: false}
            - {value: "$container = $this->getDependencyInjectionContainer();", correct: false}
    -
        question: 'True or False ? It`s highly recommended that a functional test only tests the response'
        answers:
            - {value: "True", correct: true}
            - {value: "False", correct: false}
    #Client configuration - http://symfony.com/doc/current/testing.html#testing-configuration
    -
        question: 'True or False ? You can tweak your application settings for test by putting specific configuration files to config/packages/test/*.yaml'
        answers:
            - {value: "True", correct: true}
            - {value: "False", correct: false}
    -
        question: 'What would be the right syntax to override config settings directly in your test?'
        answers:
            - {value: "$client = static::createClient(array('environment' => 'my_test_env', 'debug'=> false,));", correct: true}
            - {value: "$client = new TestClient(array('environment' => 'my_test_env', 'debug'=> false,));", correct: false}
            - {value: "$client = this->createClient(array('environment' => 'my_test_env', 'debug'=> false,));", correct: false}
    -
        question: 'What can you pass as second argument to the "static::createClient()" method in your test?'
        answers:
            - {value: "HTTP headers", correct: true}
            - {value: "Config overrides", correct: false}
    -
        question: 'What can you pass as first argument to the "static::createClient()" method in your test?'
        answers:
            - {value: "Config overrides", correct: true}
            - {value: "HTTP headers", correct: false}
    -
        question: 'Under which node would you list your directories to exclude in your phpunit.xml'
        answers:
            - {value: "phpunit/filter/whitelist/exclude", correct: true}
            - {value: "phpunit/whitelist/exclude", correct: false}
            - {value: "phpunit/whitelist/filter//exclude", correct: false}
            - {value: "phpunit/blacklist/exclude", correct: false}
    -
        question: 'Under which node would you list your test-suites nodes in your phpunit.xml'
        answers:
            - {value: "phpunit/testsuites", correct: true}
            - {value: "testsuites", correct: false}
            - {value: "phpunit/tests/testsuites", correct: false}
    -
        question: 'True or False ? Store the phpunit.xml.dist file in your code repository and ignore the phpunit.xml file'
        answers:
            - {value: "True", correct: true}
            - {value: "False", correct: false}
    -
        question: 'True or False ? Store the phpunit.xml file in your code repository and ignore the phpunit.xml.dist file'
        answers:
            - {value: "False", correct: true}
            - {value: "True", correct: false}
    #Request and response objects introspection - http://symfony.com/doc/current/testing.html#accessing-internal-objects
    -
        question: 'What would be the correct syntax to get the BrowserKit request instance in your test?'
        answers:
            - {value: "$request = $client->getInternalRequest();", correct: true}
            - {value: "$request = $client->getRequest();", correct: false}
            - {value: "$request = $client->getTestRequest();", correct: false}
            - {value: "$request = $client->getBrowserKitRequest();", correct: false}
    -
        question: 'What would be the correct syntax to get the BrowserKit response instance in your test?'
        answers:
            - {value: "$response = $client->getInternalResponse();", correct: true}
            - {value: "$response = $client->getResponse();", correct: false}
            - {value: "$response = $client->getTestResponse();", correct: false}
            - {value: "$response = $client->getBrowserKitResponse();", correct: false}
    #PHPUnit bridge - https://symfony.com/doc/current/components/phpunit_bridge.html
    -
        question: 'True or False ? The PHPUnit Bridge provides utilities to report legacy tests and usage of deprecated code and a helper for time-sensitive tests'
        answers:
            - {value: "True", correct: true}
            - {value: "False", correct: false}
    -
        question: 'True or False ? The PHPUnit Bridge provides a standard bridge to PHPUnit via Symfony'
        answers:
            - {value: "False", correct: true}
            - {value: "True", correct: false}
    -
        question: 'Which of the following features does the PHPUnit Bridget provide?'
        answers:
            - {value: "Forces the tests to use a consistent locale (C)", correct: true}
            - {value: "Auto-register class_exists to load Doctrine annotations (when used)", correct: true}
            - {value: "It displays the whole list of deprecated features used in the application", correct: true}
            - {value: "Displays the stack trace of a deprecation on-demand", correct: true}
            - {value: "Provides a ClockMock and DnsMock helper classes for time or network-sensitive tests", correct: true}
            - {value: "Provides a modified version of PHPUnit to prevent conflicts with dependencies", correct: true}
            - {value: "It displays the whole list of missing features used in the application", correct: false}
            - {value: "Displays the stack trace of a exception on-demand", correct: false}
            - {value: "Provides a unmodified version of PHPUnit to prevent conflicts with dependencies", correct: false}
    -
        question: 'How can a deprecation notice be triggered?'
        answers:
            - {value: "@trigger_error('Your deprecation message', E_USER_DEPRECATED);", correct: true}
            - {value: "@trigger_error(E_USER_DEPRECATED, 'Your deprecation message');", correct: false}
            - {value: "@trigger(E_USER_DEPRECATED, 'Your deprecation message');", correct: false}
            - {value: "@trigger(E_USER_DEPRECATED, 'Your deprecation message');", correct: false}
    -
        question: 'Which of the followings statements are valid to mark a test as legacy?'
        answers:
            - {value: "Add @group legacy annotation to its class or method", correct: true}
            - {value: "Make its class name start with the Legacy prefix", correct: true}
            - {value: "Make its method name start with testLegacy*() instead of test*()", correct: true}
            - {value: "Make its class name end with the Legacy suffix", correct: false}
            - {value: "Make its method name end with *testLegacy() instead of *test()", correct: false}
    -
        question: 'If you need to inspect the strack trace of a particular deprecation you can...'
        answers:
            - {value: "Set the SYMFONY_DEPRECATIONS_HELPER environment variable to a regular expression that matches this deprecation's message, enclosed by /message/", correct: true}
            - {value: "Set the SYMFONY_DEPRECATION_HELPER environment variable to a regular expression that matches this deprecation's message, enclosed by /message/", correct: false}
            - {value: "Set the DEPRECATIONS_HELPER environment variable to a regular expression that matches this deprecation's message, enclosed by /message/", correct: false}
